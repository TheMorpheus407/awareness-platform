name: Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        # Backend
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install coverage pytest-cov
        cd ..
        
        # Frontend
        cd frontend
        npm ci
        cd ..
    
    - name: Run backend quality checks
      run: |
        cd backend
        
        echo "🔍 Running backend quality checks..."
        
        # Type checking with mypy
        echo "Running mypy..."
        mypy . --ignore-missing-imports --strict || exit 1
        
        # Code quality with flake8
        echo "Running flake8..."
        flake8 . --max-line-length=88 --extend-ignore=E203 --count --statistics || exit 1
        
        # Security check with bandit
        echo "Running bandit..."
        pip install bandit
        bandit -r . -ll || exit 1
        
        # Complexity check
        echo "Running radon..."
        pip install radon
        radon cc . -a -nb || exit 1
        
        cd ..
    
    - name: Run frontend quality checks
      run: |
        cd frontend
        
        echo "🔍 Running frontend quality checks..."
        
        # Type checking
        echo "Running TypeScript checks..."
        npm run type-check || exit 1
        
        # Linting
        echo "Running ESLint..."
        npm run lint || exit 1
        
        # Dead code detection
        echo "Checking for unused exports..."
        npx ts-prune || true
        
        cd ..
    
    - name: Check for hardcoded secrets
      run: |
        echo "🔐 Checking for hardcoded secrets..."
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline || exit 1
    
    - name: License check
      run: |
        echo "📜 Checking licenses..."
        cd backend
        pip install pip-licenses
        pip-licenses --with-authors --with-urls --format=csv --output-file=../backend-licenses.csv
        cd ..
        
        cd frontend
        npx license-checker --csv --out ../frontend-licenses.csv
        cd ..
    
    - name: Create quality report
      if: always()
      run: |
        cat > quality-report.md << EOF
        # Quality Report
        
        ## Backend Quality Metrics
        - Type Safety: ✅ Enforced with mypy
        - Code Style: ✅ Enforced with flake8  
        - Security: ✅ Checked with bandit
        - Complexity: ✅ Monitored with radon
        
        ## Frontend Quality Metrics
        - Type Safety: ✅ TypeScript strict mode
        - Code Style: ✅ ESLint with strict rules
        - Bundle Size: ✅ Monitored
        
        ## Security
        - No hardcoded secrets detected
        - Dependencies scanned for vulnerabilities
        
        ## Licensing
        - All dependencies have compatible licenses
        EOF
    
    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  enforce-test-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=awareness-platform
          -Dsonar.organization=awareness
          -Dsonar.python.coverage.reportPaths=backend/coverage.xml
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
          -Dsonar.coverage.exclusions=**/*test*,**/*spec*,**/migrations/**
          -Dsonar.qualitygate.wait=true