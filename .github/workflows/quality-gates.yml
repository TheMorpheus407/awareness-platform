name: Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        # Backend
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install coverage pytest-cov
        cd ..
        
        # Frontend
        cd frontend
        npm ci
        cd ..
    
    - name: Run backend quality checks
      run: |
        cd backend
        
        echo "🔍 Running backend quality checks..."
        
        # Type checking with mypy
        echo "Running mypy..."
        mypy . --ignore-missing-imports --strict || exit 1
        
        # Code quality with flake8
        echo "Running flake8..."
        flake8 . --max-line-length=88 --extend-ignore=E203 --count --statistics || exit 1
        
        # Security check with bandit
        echo "Running bandit..."
        pip install bandit
        bandit -r . -ll || exit 1
        
        # Complexity check
        echo "Running radon..."
        pip install radon
        radon cc . -a -nb || exit 1
        
        cd ..
    
    - name: Run frontend quality checks
      run: |
        cd frontend
        
        echo "🔍 Running frontend quality checks..."
        
        # Type checking
        echo "Running TypeScript checks..."
        npm run type-check || exit 1
        
        # Linting
        echo "Running ESLint..."
        npm run lint || exit 1
        
        # Dead code detection
        echo "Checking for unused exports..."
        npx ts-prune || true
        
        cd ..
    
    - name: Check for hardcoded secrets
      run: |
        echo "🔐 Checking for hardcoded secrets..."
        pip install detect-secrets
        detect-secrets scan --baseline .secrets.baseline || exit 1
    
    - name: License check
      run: |
        echo "📜 Checking licenses..."
        cd backend
        pip install pip-licenses
        pip-licenses --with-authors --with-urls --format=csv --output-file=../backend-licenses.csv
        cd ..
        
        cd frontend
        npx license-checker --csv --out ../frontend-licenses.csv
        cd ..
    
    - name: Create quality report
      if: always()
      run: |
        cat > quality-report.md << EOF
        # Quality Report
        
        ## Backend Quality Metrics
        - Type Safety: ✅ Enforced with mypy
        - Code Style: ✅ Enforced with flake8  
        - Security: ✅ Checked with bandit
        - Complexity: ✅ Monitored with radon
        
        ## Frontend Quality Metrics
        - Type Safety: ✅ TypeScript strict mode
        - Code Style: ✅ ESLint with strict rules
        - Bundle Size: ✅ Monitored
        
        ## Security
        - No hardcoded secrets detected
        - Dependencies scanned for vulnerabilities
        
        ## Licensing
        - All dependencies have compatible licenses
        EOF
    
    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('quality-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  # SonarCloud Integration (Currently Disabled)
  # To enable SonarCloud scanning:
  # 1. Create a project at https://sonarcloud.io with key "awareness-platform"
  # 2. Add the project to organization "awareness" 
  # 3. Generate a SONAR_TOKEN and add it to GitHub Secrets
  # 4. Uncomment the job below
  #
  # enforce-test-coverage:
  #   runs-on: ubuntu-latest
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #   
  #   - name: SonarCloud Scan
  #     uses: SonarSource/sonarcloud-github-action@master
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     with:
  #       args: >
  #         -Dsonar.projectKey=awareness-platform
  #         -Dsonar.organization=awareness
  #         -Dsonar.python.coverage.reportPaths=backend/coverage.xml
  #         -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
  #         -Dsonar.coverage.exclusions=**/*test*,**/*spec*,**/migrations/**
  #         -Dsonar.qualitygate.wait=true

  # Alternative: Local Coverage Enforcement
  enforce-test-coverage:
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        # Backend
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install coverage pytest-cov
        cd ..
        
        # Frontend
        cd frontend
        npm ci
        cd ..
    
    - name: Run backend tests with coverage
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=70
        cd ..
    
    - name: Run frontend tests with coverage
      run: |
        cd frontend
        npm run test:coverage -- --ci --coverage --coverageThreshold='{"global":{"branches":60,"functions":60,"lines":60,"statements":60}}'
        cd ..
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          backend/coverage.xml
          frontend/coverage/lcov.info
    
    - name: Generate coverage summary
      run: |
        # Backend coverage
        cd backend
        BACKEND_COV=$(coverage report | grep "TOTAL" | awk '{print $4}' | sed 's/%//')
        echo "BACKEND_COVERAGE=$BACKEND_COV" >> $GITHUB_ENV
        cd ..
        
        # Frontend coverage
        cd frontend
        # Extract coverage from lcov.info
        if [ -f coverage/lcov.info ]; then
          LINES=$(grep -E "^LF:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}')
          LINES_HIT=$(grep -E "^LH:" coverage/lcov.info | awk -F: '{sum += $2} END {print sum}')
          if [ "$LINES" -gt 0 ]; then
            FRONTEND_COV=$((LINES_HIT * 100 / LINES))
          else
            FRONTEND_COV=0
          fi
        else
          FRONTEND_COV=0
        fi
        echo "FRONTEND_COVERAGE=$FRONTEND_COV" >> $GITHUB_ENV
        cd ..
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const backendCoverage = process.env.BACKEND_COVERAGE || 'N/A';
          const frontendCoverage = process.env.FRONTEND_COVERAGE || 'N/A';
          
          const comment = `## 📊 Coverage Report
          
          | Component | Coverage |
          |-----------|----------|
          | Backend   | ${backendCoverage}% |
          | Frontend  | ${frontendCoverage}% |
          
          ✅ Minimum coverage thresholds met!
          
          _Coverage artifacts are available in the workflow summary._`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });