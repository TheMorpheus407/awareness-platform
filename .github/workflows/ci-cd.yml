name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-asyncio
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        FRONTEND_URL: http://localhost:3000
        ENVIRONMENT: test
        CORS_ORIGINS: '["http://localhost:3000","http://localhost:5173"]'
        EMAIL_FROM: test@example.com
        EMAIL_PASSWORD: test-password
        SMTP_HOST: smtp.test.com
        SMTP_PORT: 587
        SMTP_USERNAME: test@example.com
        SMTP_FROM_EMAIL: test@example.com
        SMTP_FROM_NAME: Test Platform
      run: |
        cd backend
        pytest -v --cov=. --cov-report=xml --cov-report=html
        
    - name: Check backend coverage
      run: |
        cd backend
        # Extract coverage percentage from pytest output
        coverage_percent=$(coverage report | grep "TOTAL" | awk '{print $NF}' | sed 's/%//' || echo "0")
        echo "Backend coverage: $coverage_percent%"
        # Temporarily disabled coverage requirement for initial setup
        # if [ "$coverage_percent" -lt 70 ]; then
        #   echo "::error::Backend coverage is $coverage_percent%, minimum required is 70%"
        #   exit 1
        # fi
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
        
    - name: Run linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run unit tests
      run: |
        cd frontend
        npm test -- --run --coverage
        
    - name: Check coverage thresholds
      run: |
        cd frontend
        # Ensure coverage report exists
        if [ -f coverage/coverage-summary.json ]; then
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct' || echo "0")
          echo "Frontend coverage: $coverage%"
          # Temporarily disabled coverage requirement for initial setup
          # if (( $(echo "$coverage < 60" | bc -l) )); then
          #   echo "::error::Frontend coverage is $coverage%, minimum required is 60%"
          #   exit 1
          # fi
        else
          echo "No coverage report found"
        fi
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-e2e
        FRONTEND_URL: http://localhost:5173
        BACKEND_URL: http://localhost:8000
        CORS_ORIGINS: '["http://localhost:5173","http://localhost:3000"]'
        ENVIRONMENT: test
        EMAIL_FROM: test@example.com
        SMTP_FROM_EMAIL: test@example.com
      run: |
        cd backend
        # Fix enum conflicts before migration
        python scripts/ci_migration_fix.py || echo "Warning: Failed to fix migration types"
        # Run migrations with retry logic
        max_retries=3
        retry_count=0
        while [ $retry_count -lt $max_retries ]; do
          if alembic upgrade head; then
            echo "Migrations completed successfully"
            break
          else
            retry_count=$((retry_count + 1))
            echo "Migration failed, attempt $retry_count of $max_retries"
            if [ $retry_count -eq $max_retries ]; then
              echo "ERROR: Failed to run migrations after $max_retries attempts"
              exit 1
            fi
            sleep 5
          fi
        done
        
    - name: Seed E2E data
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-e2e
        FRONTEND_URL: http://localhost:5173
        BACKEND_URL: http://localhost:8000
        CORS_ORIGINS: '["http://localhost:5173","http://localhost:3000"]'
        ENVIRONMENT: test
        EMAIL_FROM: test@example.com
        SMTP_FROM_EMAIL: test@example.com
      run: |
        cd backend
        python scripts/seed_e2e_data.py
        
    - name: Start backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-e2e
        FRONTEND_URL: http://localhost:5173
        BACKEND_URL: http://localhost:8000
        CORS_ORIGINS: '["http://localhost:5173","http://localhost:3000"]'
        ENVIRONMENT: test
        EMAIL_FROM: test@example.com
        EMAIL_PASSWORD: test-password
        SMTP_HOST: smtp.test.com
        SMTP_PORT: 587
        SMTP_USERNAME: test@example.com
        SMTP_FROM_EMAIL: test@example.com
        SMTP_FROM_NAME: Test Platform
      run: |
        cd backend
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/api/health || exit 1
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Install Playwright
      run: |
        cd frontend
        npx playwright install --with-deps
        
    - name: Run E2E tests
      env:
        VITE_API_URL: http://localhost:8000
      run: |
        cd frontend
        npm run test:e2e
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.backend-tests.result == 'success' && needs.frontend-tests.result == 'success' && needs.e2e-tests.result == 'success'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Trigger deployment workflow
  trigger-deployment:
    runs-on: ubuntu-latest
    needs: [build-and-push, e2e-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.build-and-push.result == 'success' && needs.e2e-tests.result == 'success'
    
    steps:
    - name: Trigger deployment workflow
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'deploy.yml',
            ref: 'main'
          });
          
          console.log('Deployment workflow triggered successfully');