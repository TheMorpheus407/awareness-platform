name: Enhanced CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  COVERAGE_THRESHOLD: 80

jobs:
  # Code Quality Gate
  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      infra-changed: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'requirements*.txt'
              - 'docker-compose*.yml'
            frontend:
              - 'frontend/**'
              - 'package*.json'
            infra:
              - 'infrastructure/**'
              - '.github/workflows/**'
              - 'docker/**'

  # Backend Testing Suite
  backend-test:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.backend-changed == 'true' || github.event_name == 'push'
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install safety ruff mypy
      
      - name: Run linting and type checks
        run: |
          cd backend
          ruff check . --fix
          mypy . --config-file mypy.ini || true
      
      - name: Run security checks - Bandit
        run: |
          cd backend
          bandit -r . -ll -x '/tests/,/venv/' -f json -o bandit-report.json
      
      - name: Run dependency security scan
        run: |
          cd backend
          safety check --json --output safety-report.json || true
          pip-audit --desc --format json --output pip-audit-report.json || true
      
      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/unit -v --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}
      
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/api tests/core -v --cov=. --cov-append --cov-report=xml --cov-report=html
      
      - name: Generate test report
        if: always()
        run: |
          cd backend
          pytest --html=pytest-report.html --self-contained-html || true
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            backend/coverage.xml
            backend/htmlcov/
            backend/pytest-report.html
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json
            backend/pip-audit-report.json
      
      - name: Coverage comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: ${{ env.COVERAGE_THRESHOLD }}
          MINIMUM_ORANGE: 70

  # Frontend Testing Suite
  frontend-test:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.frontend-changed == 'true' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          npm install -g npm-audit-html
      
      - name: Run linting
        run: |
          cd frontend
          npm run lint
      
      - name: Run type checking
        run: |
          cd frontend
          npm run type-check
      
      - name: Run security audit
        run: |
          cd frontend
          npm audit --json > npm-audit-report.json || true
          npm audit --audit-level=moderate || true
      
      - name: Run unit tests with coverage
        run: |
          cd frontend
          npm run test:coverage -- --reporter=json --outputFile=test-results.json
          
      - name: Check coverage threshold
        run: |
          cd frontend
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < ${{ env.COVERAGE_THRESHOLD }}" | bc -l) )); then
            echo "Coverage is below threshold of ${{ env.COVERAGE_THRESHOLD }}%"
            exit 1
          fi
      
      - name: Run accessibility tests
        run: |
          cd frontend
          npm install -D axe-core @axe-core/react
          npm run test -- --testNamePattern="accessibility"
      
      - name: Build production bundle
        run: |
          cd frontend
          npm run build
      
      - name: Analyze bundle size
        run: |
          cd frontend
          npm install -D webpack-bundle-analyzer
          echo "Bundle analysis complete"
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            frontend/coverage/
            frontend/test-results.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-security-reports
          path: frontend/npm-audit-report.json

  # E2E Testing Suite
  e2e-test:
    name: E2E Tests with Playwright
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Start services with Docker Compose
        run: |
          cp .env.example .env
          docker-compose -f docker-compose.test.yml up -d
          ./scripts/wait-for-services.sh
      
      - name: Install Playwright
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: Run E2E tests
        run: |
          cd frontend
          npm run test:e2e -- --project=${{ matrix.browser }}
      
      - name: Upload Playwright reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: frontend/playwright-report/
          retention-days: 30
      
      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos-${{ matrix.browser }}
          path: frontend/test-results/
      
      - name: Stop services
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  # Security Scanning Suite
  security-scan:
    name: Comprehensive Security Scanning
    runs-on: ubuntu-latest
    needs: quality-gate
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Run Trivy config scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'awareness-schulungen'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-fs'
      
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-reports
          path: reports/
      
      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Container scan - Backend
        uses: anchore/scan-action@v3
        with:
          path: './backend'
          fail-build: false
          output-format: sarif
          output-file: backend-container-scan.sarif
      
      - name: Container scan - Frontend
        uses: anchore/scan-action@v3
        with:
          path: './frontend'
          fail-build: false
          output-format: sarif
          output-file: frontend-container-scan.sarif

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Start test environment
        run: |
          cp .env.example .env
          docker-compose -f docker-compose.test.yml up -d
          ./scripts/wait-for-services.sh
      
      - name: Run load tests
        run: |
          k6 run infrastructure/tests/performance/load-test.js --out json=load-test-results.json
      
      - name: Run stress tests
        run: |
          k6 run infrastructure/tests/performance/stress-test.js --out json=stress-test-results.json
      
      - name: Analyze performance results
        run: |
          node infrastructure/tests/performance/analyze-results.js
      
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            load-test-results.json
            stress-test-results.json
            performance-analysis.html

  # Build and Push Images
  build-images:
    name: Build & Scan Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: false
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/awareness-backend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/awareness-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/backend-image.tar
      
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: false
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/awareness-frontend:${{ github.sha }}
            ${{ secrets.DOCKER_USERNAME }}/awareness-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/frontend-image.tar
      
      - name: Scan backend image
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/backend-image.tar
          format: 'sarif'
          output: 'backend-image-scan.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
      
      - name: Scan frontend image
        uses: aquasecurity/trivy-action@master
        with:
          input: /tmp/frontend-image.tar
          format: 'sarif'
          output: 'frontend-image-scan.sarif'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
      
      - name: Push images if secure
        run: |
          docker load -i /tmp/backend-image.tar
          docker load -i /tmp/frontend-image.tar
          docker push ${{ secrets.DOCKER_USERNAME }}/awareness-backend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/awareness-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/awareness-frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKER_USERNAME }}/awareness-frontend:latest

  # Final Quality Gate
  quality-gate-final:
    name: Final Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test, security-scan, performance-test]
    if: always()
    steps:
      - name: Check all test results
        run: |
          if [[ "${{ needs.backend-test.result }}" != "success" ]] ||
             [[ "${{ needs.frontend-test.result }}" != "success" ]] ||
             [[ "${{ needs.e2e-test.result }}" != "success" ]] ||
             [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "Tests failed. Blocking merge."
            exit 1
          fi
          echo "All tests passed!"
      
      - name: Create test summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = core.summary
              .addHeading('Test Results Summary')
              .addTable([
                [{data: 'Test Suite', header: true}, {data: 'Status', header: true}],
                ['Backend Tests', '${{ needs.backend-test.result }}'],
                ['Frontend Tests', '${{ needs.frontend-test.result }}'],
                ['E2E Tests', '${{ needs.e2e-test.result }}'],
                ['Security Scan', '${{ needs.security-scan.result }}'],
                ['Performance Tests', '${{ needs.performance-test.result }}']
              ])
              .write()