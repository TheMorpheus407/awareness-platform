name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      
      - name: Run backend tests
        run: |
          cd backend
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          pytest --cov=. --cov-report=xml
          if [ $? -ne 0 ]; then
            echo "::error::Backend tests failed"
            exit 1
          fi
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --passWithNoTests

  build:
    needs: test
    if: success()  # Only build if tests pass
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    if: always() && needs.build.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Add timeout to prevent exit code 137
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 83.228.205.20 >> ~/.ssh/known_hosts
      
      - name: Create deployment directory on server
        run: |
          ssh ubuntu@83.228.205.20 "sudo mkdir -p /opt/awareness/{backend,frontend,scripts,nginx,deployment/nginx/sites-enabled}"
      
      - name: Copy deployment files
        run: |
          scp docker-compose.prod.ghcr.yml ubuntu@83.228.205.20:/tmp/docker-compose.yml
          ssh ubuntu@83.228.205.20 "sudo mv /tmp/docker-compose.yml /opt/awareness/"
          
          if [ -f deployment/scripts/deploy-production.sh ]; then
            scp deployment/scripts/deploy-production.sh ubuntu@83.228.205.20:/tmp/deploy-production.sh
            ssh ubuntu@83.228.205.20 "sudo mv /tmp/deploy-production.sh /opt/awareness/scripts/ && sudo chmod +x /opt/awareness/scripts/deploy-production.sh"
          fi
          
          if [ -f deployment/nginx/sites-enabled/awareness-platform.conf ]; then
            scp deployment/nginx/sites-enabled/awareness-platform.conf ubuntu@83.228.205.20:/tmp/awareness-platform.conf
            ssh ubuntu@83.228.205.20 "sudo mv /tmp/awareness-platform.conf /opt/awareness/nginx/"
          fi
      
      - name: Create environment file
        run: |
          cat > .env.production << EOF
          # Database
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DATABASE_URL=postgresql://awareness_user:${{ secrets.DB_PASSWORD }}@postgres:5432/awareness_platform
          POSTGRES_USER=awareness_user
          POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}
          POSTGRES_DB=awareness_platform
          DB_USER=awareness_user
          
          # Application
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          ALGORITHM=HS256
          ACCESS_TOKEN_EXPIRE_MINUTES=30
          REFRESH_TOKEN_EXPIRE_DAYS=7
          
          # Email
          EMAIL_FROM=kontakt@bootstrap-awareness.de
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          
          # Frontend
          VITE_API_URL=https://bootstrap-awareness.de/api
          FRONTEND_URL=https://bootstrap-awareness.de
          
          # Redis
          REDIS_URL=redis://redis:6379
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EOF
      
      - name: Copy environment file to server
        run: |
          scp .env.production ubuntu@83.228.205.20:/tmp/.env
          ssh ubuntu@83.228.205.20 "sudo mv /tmp/.env /opt/awareness/.env"
          rm .env.production
      
      - name: Deploy application
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        run: |
          # Copy optimized deployment script
          scp deployment/scripts/deploy-production-optimized.sh ubuntu@83.228.205.20:/tmp/deploy.sh
          ssh ubuntu@83.228.205.20 "sudo mv /tmp/deploy.sh /opt/awareness/scripts/deploy-optimized.sh && sudo chmod +x /opt/awareness/scripts/deploy-optimized.sh"
          
          # Login to GitHub Container Registry
          ssh ubuntu@83.228.205.20 "echo '${{ secrets.GITHUB_TOKEN }}' | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin"
          
          # Run optimized deployment
          ssh ubuntu@83.228.205.20 "cd /opt/awareness && timeout 1200 sudo REGISTRY=$REGISTRY IMAGE_NAME=$IMAGE_NAME ./scripts/deploy-optimized.sh"
      
      - name: Health check
        run: |
          MAX_RETRIES=5
          RETRY_DELAY=10
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i/$MAX_RETRIES"
            response=$(curl -s -o /dev/null -w "%{http_code}" https://bootstrap-awareness.de/api/health)
            if [ $response -eq 200 ]; then
              echo "Health check passed"
              exit 0
            else
              echo "Health check failed with status $response"
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Retrying in $RETRY_DELAY seconds..."
                sleep $RETRY_DELAY
              fi
            fi
          done
          echo "::error::Health check failed after $MAX_RETRIES attempts"
          exit 1
      
      - name: Create admin user
        run: |
          echo "Creating admin user on production..."
          scp backend/scripts/create_production_admin.py ubuntu@83.228.205.20:/tmp/
          ssh ubuntu@83.228.205.20 "sudo docker cp /tmp/create_production_admin.py awareness-backend-1:/tmp/ && sudo docker exec awareness-backend-1 python /tmp/create_production_admin.py" || true