name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Test Suite
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Run linting
      run: |
        cd backend
        flake8 app tests --max-line-length=100 --ignore=E203,W503
        
    - name: Run type checking
      run: |
        cd backend
        mypy app --ignore-missing-imports || true  # Non-blocking for now
        
    - name: Run security checks
      run: |
        cd backend
        bandit -r app -ll || true  # Low severity only
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
        PYTHONPATH: ${{ github.workspace }}/backend
      run: |
        cd backend
        python run_tests.py --unit --coverage
        
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
        PYTHONPATH: ${{ github.workspace }}/backend
      run: |
        cd backend
        python run_tests.py --integration
        
    - name: Run critical tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        ENVIRONMENT: test
        PYTHONPATH: ${{ github.workspace }}/backend
      run: |
        cd backend
        pytest -m critical -v --tb=short
        
    - name: Check coverage thresholds
      run: |
        cd backend
        coverage report --fail-under=70
        
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/htmlcov/
        
    - name: Generate test report
      if: always()
      run: |
        cd backend
        coverage report > test-report.txt
        echo "## Backend Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        tail -10 test-report.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Frontend Test Suite
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
        
    - name: Run unit tests
      run: |
        cd frontend
        npm run test:coverage -- --run
        
    - name: Check coverage thresholds
      run: |
        cd frontend
        # Extract coverage and check thresholds
        if [ -f coverage/coverage-summary.json ]; then
          statements=$(cat coverage/coverage-summary.json | jq '.total.statements.pct')
          branches=$(cat coverage/coverage-summary.json | jq '.total.branches.pct')
          functions=$(cat coverage/coverage-summary.json | jq '.total.functions.pct')
          lines=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          echo "Coverage: Statements=$statements%, Branches=$branches%, Functions=$functions%, Lines=$lines%"
          
          # Check minimum thresholds
          if (( $(echo "$statements < 60" | bc -l) )); then
            echo "❌ Statement coverage below 60%"
            exit 1
          fi
        fi
        
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage/
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Generate test report
      if: always()
      run: |
        cd frontend
        echo "## Frontend Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        if [ -f coverage/coverage-summary.json ]; then
          cat coverage/coverage-summary.json | jq '.total' >> $GITHUB_STEP_SUMMARY
        fi
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # E2E Test Suite
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install backend
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Install frontend
      run: |
        cd frontend
        npm ci
        npx playwright install --with-deps
        
    - name: Start backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_db
        SECRET_KEY: e2e-test-key
        ENVIRONMENT: test
      run: |
        cd backend
        # Run migrations
        alembic upgrade head
        # Seed test data
        python scripts/seed_e2e_data.py
        # Start server in background
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        # Wait for server to be ready
        timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 1; done'
        
    - name: Start frontend
      run: |
        cd frontend
        npm run build
        npx serve -s dist -p 3000 &
        # Wait for frontend to be ready
        timeout 30 bash -c 'until curl -f http://localhost:3000; do sleep 1; done'
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm run test:e2e
        
    - name: Upload E2E artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: e2e-artifacts
        path: |
          frontend/test-results/
          frontend/playwright-report/

  # Security Test Suite
  security-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run backend security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: 'backend/'
        format: 'sarif'
        output: 'backend-security.sarif'
        
    - name: Run frontend security scan
      run: |
        cd frontend
        npm audit --production
        
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        
    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'backend-security.sarif'

  # Performance Test Suite
  performance-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install performance tools
      run: |
        pip install locust pytest-benchmark
        
    - name: Run backend performance tests
      run: |
        cd backend
        python run_tests.py --performance
        
    - name: Run frontend bundle analysis
      run: |
        cd frontend
        npm run build -- --metafile
        npx esbuild-visualizer --metadata ./dist/metafile.json --filename ./bundle-analysis.html
        
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          backend/performance-report.html
          frontend/bundle-analysis.html

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-tests, performance-tests]
    if: always()
    steps:
    - name: Generate test summary
      run: |
        echo "# Test Suite Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [[ "${{ needs.backend-tests.result }}" == "success" ]]; then
          echo "✅ Backend Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Backend Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "✅ Frontend Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Frontend Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.e2e-tests.result }}" == "success" ]]; then
          echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.security-tests.result }}" == "success" ]]; then
          echo "✅ Security Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.performance-tests.result }}" == "success" ]]; then
          echo "✅ Performance Tests: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance Tests: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const summary = `
          ## Test Results
          
          | Test Suite | Status |
          |------------|--------|
          | Backend | ${{ needs.backend-tests.result }} |
          | Frontend | ${{ needs.frontend-tests.result }} |
          | E2E | ${{ needs.e2e-tests.result }} |
          | Security | ${{ needs.security-tests.result }} |
          | Performance | ${{ needs.performance-tests.result }} |
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });