name: Deployment Monitor

on:
  workflow_run:
    workflows: ["Deploy to Production"]
    types:
      - completed

jobs:
  notify-deployment-status:
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = context.payload.workflow_run.conclusion;
            const runUrl = context.payload.workflow_run.html_url;
            const runId = context.payload.workflow_run.id;
            
            if (conclusion === 'failure') {
              // Create an issue for failed deployment
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `üö® Deployment Failed - Run #${runId}`,
                body: `## Deployment Failure Alert
                
                The production deployment has failed.
                
                **Details:**
                - Workflow Run: ${runUrl}
                - Time: ${new Date().toISOString()}
                - Branch: ${context.payload.workflow_run.head_branch}
                - Commit: ${context.payload.workflow_run.head_sha}
                
                **Action Required:**
                1. Check the workflow logs for error details
                2. Verify that all secrets are properly configured
                3. Check server connectivity and permissions
                4. Review recent changes that might have caused the failure
                
                **Rollback Instructions:**
                If needed, run the rollback workflow or SSH to the server and execute:
                \`\`\`bash
                cd /opt/awareness
                sudo ./scripts/deploy-with-rollback.sh rollback
                \`\`\`
                
                cc: @TheMorpheus407`,
                labels: ['deployment', 'critical', 'production']
              });
              
              core.setFailed(`Deployment failed. Issue created: ${issue.data.html_url}`);
            } else if (conclusion === 'success') {
              core.info('Deployment completed successfully');
              
              // Post deployment verification
              const healthCheckUrl = 'https://bootstrap-awareness.de/api/health';
              try {
                const response = await fetch(healthCheckUrl);
                if (!response.ok) {
                  core.warning(`Post-deployment health check returned status ${response.status}`);
                }
              } catch (error) {
                core.warning(`Post-deployment health check failed: ${error.message}`);
              }
            }
      
      - name: Send notification
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = context.payload.workflow_run.conclusion;
            const status = conclusion === 'success' ? '‚úÖ' : '‚ùå';
            const message = `${status} Deployment ${conclusion} for commit ${context.payload.workflow_run.head_sha.substring(0, 7)}`;
            
            // Log the status
            console.log(message);
            
            // You can add additional notification methods here:
            // - Slack webhook
            // - Discord webhook
            // - Email notification
            // - SMS alert for critical failures