name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: awareness_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-asyncio
    
    - name: Set up backend environment
      working-directory: ./backend
      run: |
        cat > .env.test << EOF
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/awareness_test
        REDIS_URL=redis://localhost:6379
        SECRET_KEY=test-secret-key-for-ci
        FRONTEND_URL=http://localhost:5173
        BACKEND_URL=http://localhost:8000
        CORS_ORIGINS=["http://localhost:5173","http://localhost:3000"]
        ENVIRONMENT=test
        EMAIL_FROM=test@example.com
        EMAIL_PASSWORD=test-password
        SMTP_HOST=smtp.test.com
        SMTP_PORT=587
        SMTP_USERNAME=test@example.com
        SMTP_FROM_EMAIL=test@example.com
        SMTP_FROM_NAME=Test Platform
        EOF
    
    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/awareness_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        FRONTEND_URL: http://localhost:5173
        BACKEND_URL: http://localhost:8000
        CORS_ORIGINS: '["http://localhost:5173","http://localhost:3000"]'
        ENVIRONMENT: test
        EMAIL_FROM: test@example.com
        SMTP_FROM_EMAIL: test@example.com
      run: |
        # Clean up any existing types
        python scripts/fix_migration_types.py || echo "Warning: Failed to fix migration types"
        # Run migrations with retry logic
        max_retries=3
        retry_count=0
        while [ $retry_count -lt $max_retries ]; do
          if alembic upgrade head; then
            echo "Migrations completed successfully"
            break
          else
            retry_count=$((retry_count + 1))
            echo "Migration failed, attempt $retry_count of $max_retries"
            if [ $retry_count -eq $max_retries ]; then
              echo "ERROR: Failed to run migrations after $max_retries attempts"
              exit 1
            fi
            sleep 5
          fi
        done
        # Seed test data
        python scripts/seed_data.py || echo "Warning: Failed to seed test data"
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Install Playwright browsers
      working-directory: ./frontend
      run: npx playwright install --with-deps
    
    - name: Start backend server
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/awareness_test
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key-for-ci
        FRONTEND_URL: http://localhost:5173
        BACKEND_URL: http://localhost:8000
        CORS_ORIGINS: '["http://localhost:5173","http://localhost:3000"]'
        ENVIRONMENT: test
        EMAIL_FROM: test@example.com
        EMAIL_PASSWORD: test-password
        SMTP_HOST: smtp.test.com
        SMTP_PORT: 587
        SMTP_USERNAME: test@example.com
        SMTP_FROM_EMAIL: test@example.com
        SMTP_FROM_NAME: Test Platform
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10
        curl -f http://localhost:8000/api/health || exit 1
    
    - name: Run E2E tests
      working-directory: ./frontend
      env:
        CI: true
        PLAYWRIGHT_BASE_URL: http://localhost:5173
        VITE_API_URL: http://localhost:8000
      run: npx playwright test
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30
    
    - name: Upload test videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-videos
        path: frontend/test-results/
        retention-days: 7
    
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-screenshots
        path: frontend/test-results/
        retention-days: 7

  visual-regression:
    runs-on: ubuntu-latest
    needs: e2e-tests
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download baseline screenshots
      uses: actions/download-artifact@v4
      with:
        name: visual-regression-baseline
        path: frontend/e2e/screenshots-baseline/
      continue-on-error: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: |
        npm ci
        npx playwright install --with-deps
    
    - name: Run visual regression tests
      working-directory: ./frontend
      run: npx playwright test visual-regression
    
    - name: Upload visual diff report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: visual-regression-diff
        path: frontend/test-results/
        retention-days: 7
    
    - name: Comment PR with visual changes
      uses: actions/github-script@v7
      if: failure()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const comment = `## 🎨 Visual Regression Detected
          
          Changes were detected in the visual appearance of the application.
          Please review the visual diff report in the artifacts.
          
          [View Visual Diff Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });