{
  "info": {
    "name": "Production Critical Path Tests",
    "description": "Critical user journeys that must work in production",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Critical Path: User Registration to Course Completion",
      "item": [
        {
          "name": "1. Homepage Loads",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Homepage loads successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Critical elements present', function () {",
                  "    pm.expect(pm.response.text()).to.include('Awareness Schulungen');",
                  "    pm.expect(pm.response.text()).to.include('Register');",
                  "    pm.expect(pm.response.text()).to.include('Login');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          }
        },
        {
          "name": "2. User Can Register",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate unique email for test",
                  "const timestamp = Date.now();",
                  "pm.environment.set('test_email', `prod-test-${timestamp}@example.com`);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration endpoint accessible', function () {",
                  "    pm.expect([201, 409]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('user_id', jsonData.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test_email}}\",\n    \"password\": \"ProdTest123!\",\n    \"first_name\": \"Production\",\n    \"last_name\": \"Test\",\n    \"company_name\": \"Production Test Company\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          }
        },
        {
          "name": "3. User Can Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('JWT token received', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.access_token).to.be.a('string');",
                  "    pm.expect(jsonData.access_token.split('.')).to.have.lengthOf(3);",
                  "    pm.environment.set('access_token', jsonData.access_token);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{test_email}}"
                },
                {
                  "key": "password",
                  "value": "ProdTest123!"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          }
        },
        {
          "name": "4. User Can Access Dashboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Dashboard accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Dashboard data structure correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('stats');",
                  "    pm.expect(jsonData.stats).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/dashboard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "dashboard"]
            }
          }
        },
        {
          "name": "5. User Can Browse Courses",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Courses load successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('At least one course available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.courses).to.be.an('array');",
                  "    pm.expect(jsonData.courses.length).to.be.above(0);",
                  "    ",
                  "    if (jsonData.courses.length > 0) {",
                  "        pm.environment.set('course_id', jsonData.courses[0].id);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/courses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "courses"]
            }
          }
        },
        {
          "name": "6. User Can Enroll in Course",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Enrollment successful or already enrolled', function () {",
                  "    pm.expect([200, 201, 409]).to.include(pm.response.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/courses/{{course_id}}/enroll",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "courses", "{{course_id}}", "enroll"]
            }
          }
        }
      ]
    },
    {
      "name": "Critical Infrastructure",
      "item": [
        {
          "name": "Database Connectivity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Database is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.database).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health"]
            }
          }
        },
        {
          "name": "Redis Cache Connectivity",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Redis is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.redis).to.eql('healthy');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health"]
            }
          }
        },
        {
          "name": "Static Assets Loading",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Static assets accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Correct content type', function () {",
                  "    pm.response.to.have.header('Content-Type');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/static/css/main.css",
              "host": ["{{baseUrl}}"],
              "path": ["static", "css", "main.css"]
            }
          }
        }
      ]
    },
    {
      "name": "Payment Flow",
      "item": [
        {
          "name": "Pricing Page Accessible",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Pricing page loads', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Pricing tiers displayed', function () {",
                  "    pm.expect(pm.response.text()).to.include('Free');",
                  "    pm.expect(pm.response.text()).to.include('Professional');",
                  "    pm.expect(pm.response.text()).to.include('Enterprise');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/pricing",
              "host": ["{{baseUrl}}"],
              "path": ["pricing"]
            }
          }
        },
        {
          "name": "Payment API Available",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment endpoint responds', function () {",
                  "    pm.expect([200, 401]).to.include(pm.response.code);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/payments/plans",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "payments", "plans"]
            }
          }
        }
      ]
    },
    {
      "name": "Security Validation",
      "item": [
        {
          "name": "HTTPS Redirect Working",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('HTTPS is enforced', function () {",
                  "    pm.expect(pm.request.url.protocol).to.eql('https');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health"]
            }
          }
        },
        {
          "name": "Rate Limiting Active",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Rate limit headers present', function () {",
                  "    pm.response.to.have.header('X-RateLimit-Limit');",
                  "    pm.response.to.have.header('X-RateLimit-Remaining');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "health"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set production base URL",
          "if (!pm.environment.get('baseUrl')) {",
          "    pm.environment.set('baseUrl', 'https://bootstrap-awareness.de');",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Critical: No 5xx errors in production",
          "pm.test('No server errors in production', function () {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});",
          "",
          "// Performance: Response time under 3 seconds",
          "pm.test('Response time acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(3000);",
          "});"
        ]
      }
    }
  ]
}